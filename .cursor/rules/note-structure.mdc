---
alwaysApply: true
description: "Guidelines for creating and structuring notes in this repository"
globs: "notes/**/*.md"
---

# Note Structure and Format

## File Organization
- Notes are organized by category in subdirectories: `notes/ml/`, `notes/algo/`, `notes/sd/`
- Categories: `ml` (machine learning), `algo` (algorithms), `sd` (system design)
- Filenames: `{slug}.md` (no dates in filenames)

## Required Frontmatter
Every note must include:
```yaml
---
title: "Your Note Title"
date: "YYYY-MM-DD"
category: "ml|algo|sd"
---
```

## Optional Frontmatter Fields
```yaml
tags: []
related: []
slug: "custom-slug"  # if different from generated slug
```

## Required Sections
Every note must have these sections:
- `# Title` (H1 heading matching the title)
- `## Summary` - 1-3 line summary
- `## Details` - Main content
- `## Examples / snippets` - Code examples with language tags

## Code Block Requirements
- All code blocks must specify a language (e.g., ```python, ```javascript)
- Use fenced code blocks with backticks
- Include helpful comments in code examples

## Markdown Linting Guidelines

To ensure notes pass automated linting (remark and markdownlint), follow these rules:

### Variable References in Text
- **ALWAYS escape square brackets** when referring to variables, array indices, or dictionary keys in prose
- ❌ Wrong: `Update rains[i] = l`
- ✅ Correct: `Update rains\[i] = l`
- ❌ Wrong: `Set dist[neighbor] = dist[u] + 1`
- ✅ Correct: `Set dist\[neighbor] = dist\[u] + 1`
- ❌ Wrong: `Range [ql, qr]`
- ✅ Correct: `Range \[ql, qr]`

**Why?** Remark interprets `[text]` as markdown link references. Escaping with backslash `\[text]` tells the linter it's literal text.

### Common Patterns to Escape
- Array/list indices: `arr\[i]`, `matrix\[row]\[col]`
- Dictionary/map keys: `dict\[key]`, `visited\[node]`
- Mathematical ranges: `\[a, b]`, `\[0, n)`
- Function parameters: `func\[param]`

### Other Linting Rules
- Use spaces instead of hard tabs for indentation
- Keep existing style for headings and lists (rules are relaxed in `.markdownlint.json`)

### Testing Locally
Before pushing, run linters locally:
```bash
npx remark . --frail
npx markdownlint "**/*.md" --ignore node_modules
```

## Template Usage
Use the helper script to create new notes:
```bash
./scripts/new_note.sh "Note Title" category [slug]
```

Example:
```bash
./scripts/new_note.sh "Kalman Filter" ml kalman-filter
```

## File References
- [Note Template](mdc:templates/note-template.md) - Template for new notes
- [Helper Script](mdc:scripts/new_note.sh) - Script for creating notes