---
alwaysApply: true
description: "Guidelines for creating and structuring notes in this repository"
globs: "notes/**/*.md"
---

# Note Structure and Format

## File Organization (Dynamic Categories)
- Notes are organized by category in subdirectories under `notes/`
- **Categories are auto-discovered** from existing `notes/` subdirectories (e.g., `algorithm/`, `machine-learning/`, `system-design/`, `devops/`)
- **Adding new categories:** Create a new directory under `notes/` and it becomes automatically available
- Filenames: `{slug}.md` (no dates in filenames)

## Required Frontmatter
Every note must include:
```yaml
---
title: "Your Note Title"
date: "YYYY-MM-DD"
category: "category-name"  # Must match a directory in notes/
---
```

## Optional Frontmatter Fields
```yaml
tags: []
related: []
slug: "custom-slug"  # if different from generated slug
```

## Web Research Requirement
**MANDATORY**: Before creating any note, you must perform web research to gather quality learning resources.

Every note must include a `## Learning Sources` section at the end with 3-5 high-quality resources:
- Official documentation
- Tutorial articles or blog posts
- Video explanations
- Interactive visualizations
- Community discussions or guides

Format: `- [Source Title](URL) - Brief description of what this resource offers`

## Required Sections
Every note must have these sections:
- `# Title` (H1 heading matching the title)
- `## Summary` - 1-3 line summary
- `## Details` - Main content
- `## Examples / snippets` - Code examples with language tags
- `## Learning Sources` - 3-5 quality learning resources (see Web Research Requirement above)

## Optional Sections
Notes may include these additional sections:

### Flashcards Section (Recommended)
Include a `## Flashcards` section to create study cards that will be automatically extracted for the flashcard study system. Use one of these formats:

#### Frontmatter Format (Recommended for multiple cards)
```yaml
---
title: "Note Title"
flashcards:
  - q: "What is the time complexity of binary search?"
    a: "O(log n)"
  - q: "What data structure is used for BFS?"
    a: "Queue"
---
```

#### Fenced Block Format (Good for examples)
```markdown
```flashcard
Q: What is the time complexity of binary search?
A: O(log n)

---

Q: What data structure is used for BFS?
A: Queue
```
```

#### List Format (Simple inline cards)
```markdown
## Flashcards

- What is the time complexity of binary search? ::: O(log n)
- What data structure is used for BFS? ::: Queue
- What is the space complexity of DFS? ::: O(h) where h is height of tree
```

**Guidelines for Flashcards:**
- Keep questions clear and concise (under 100 characters when possible)
- Provide complete but brief answers (1-3 sentences)
- Focus on key concepts, definitions, and problem-solving patterns
- Test for understanding, not just memorization
- Use consistent terminology across related notes

### Quizzes Section (Recommended)
Include a `## Quizzes` section to create interactive multiple-choice questions that will be automatically extracted for the quiz study system. Quizzes support multiple correct answers.

#### Frontmatter Format (Recommended for multiple quizzes)
```yaml
---
title: "Note Title"
quizzes:
  - q: "Which algorithms work for shortest path? (Select all that apply)"
    options: ["BFS", "DFS", "Dijkstra", "Union-Find"]
    answers: [0, 2]  # Indices of correct options (0-based)
    explanation: "BFS works for unweighted graphs, Dijkstra for weighted graphs with non-negative edges"
  - q: "What data structures are used in graph traversal?"
    options: ["Queue", "Stack", "Heap", "Array"]
    answers: [0, 1]
    explanation: "Queue for BFS, Stack for DFS"
---
```

#### Markdown Section Format
```markdown
## Quizzes

### Pattern Recognition
Q: Given a sorted array and O(log n) requirement, which algorithms apply? (Select all)
Options:
- A) Binary Search
- B) Linear Search
- C) Two Pointers
- D) Sliding Window
Answers: A, C
Explanation: Binary Search is optimal for sorted arrays with O(log n). Two Pointers can also work efficiently on sorted data in O(n).
```

**Guidelines for Quizzes:**
- Focus on pattern recognition and decision-making
- Questions should test "when to use" rather than just "what is"
- Multiple correct answers are encouraged when appropriate
- Always provide clear explanations for why answers are correct
- For LeetCode notes: link problem constraints to algorithm choices

**LeetCode Pattern Recognition Guidelines:**
- "Sorted array + O(log n) requirement → Binary Search"
- "Shortest path + unweighted graph → BFS"
- "Connected components → Union-Find or DFS"
- "Sliding window on contiguous subarray → Sliding Window technique"
- Help identify which algorithm(s) to use based on problem patterns

## Code Block Requirements
- All code blocks must specify a language (e.g., `python`, `javascript`)
- Use fenced code blocks with backticks
- Include helpful comments in code examples

## Markdown Linting Guidelines

To ensure notes pass automated linting (remark and markdownlint), follow these rules:

### Variable References in Text
- **ALWAYS escape square brackets** when referring to variables, array indices, or dictionary keys in prose
- ❌ Wrong: `Update rains[i] = l`
- ✅ Correct: `Update rains\[i] = l`
- ❌ Wrong: `Set dist[neighbor] = dist[u] + 1`
- ✅ Correct: `Set dist\[neighbor] = dist\[u] + 1`
- ❌ Wrong: `Range [ql, qr]`
- ✅ Correct: `Range \[ql, qr]`

**Why?** Remark interprets `[text]` as markdown link references. Escaping with backslash `\[text]` tells the linter it's literal text.

### Common Patterns to Escape
- Array/list indices: `arr\[i]`, `matrix\[row]\[col]`
- Dictionary/map keys: `dict\[key]`, `visited\[node]`
- Mathematical ranges: `\[a, b]`, `\[0, n)`
- Function parameters: `func\[param]`

### Other Linting Rules
- Use spaces instead of hard tabs for indentation
- Keep existing style for headings and lists (rules are relaxed in `.markdownlint.json`)

### Testing Locally
Before pushing, run linters locally:
```bash
npx remark . --frail
npx markdownlint "**/*.md" --ignore node_modules
```

## Template Usage
Use the helper script to create new notes:
```bash
./scripts/new_note.sh "Note Title" category [slug]
```

Examples:
```bash
# Create in algorithm category (default)
./scripts/new_note.sh "Binary Search" algorithm

# Create in machine-learning category
./scripts/new_note.sh "Neural Networks" machine-learning

# Create in newly added category (auto-discovered)
./scripts/new_note.sh "Docker Guide" devops

# With custom slug
./scripts/new_note.sh "Load Balancing" system-design load-balancing-strategies
```

## File References
- [Note Template](mdc:templates/note-template.md) - Default template for new notes
- [DevOps Template](mdc:templates/devops-template.md) - Specialized template for DevOps topics
- [LeetCode Template](mdc:templates/leetcode-template.md) - Template for coding problems
- [System Design Template](mdc:templates/system-design-template.md) - Template for system design notes
- [Helper Script](mdc:scripts/new_note.sh) - Script for creating notes